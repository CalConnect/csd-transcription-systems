#!/usr/bin/env bash

outdir="${outdir:-site/documents}"
default_test_file="${test_file:-${1:-spec/tests.sh}}"

declare -a failures=()
declare total_test_num=0
declare pass_test_num=0
declare fail_test_num=0

test_existence_of_file() {
	local document="${1}"
	run_test \
		"Expected \e[1m${outdir}/\e[22m to contain file '\e[1m${document}\e[22m'" \
		test -e "${outdir}/${document}"
}

test_existence_of_auth_code() {
	local needle="$1"
	local document="${outdir}"/iso-24229.html
	run_test \
		"Expected \e[1m${document}\e[22m to contain authority code '\e[1m${needle}\e[22m'" \
		grep "${needle}" "${document}"
}

test_existence_of_auth_name() {
	local needle="$1"
	local document="${outdir}"/iso-24229.html
	run_test \
		"Expected \e[1m${document}\e[22m to contain authority name '\e[1m${needle}\e[22m'" \
		grep "${needle}" "${document}"
}

test_existence_of_auth_remark() {
	local needle="$1"
	local document="${outdir}"/iso-24229.html
	run_test \
		"Expected \e[1m${document}\e[22m to contain authority remark '\e[1m${needle}\e[22m'" \
		grep "${needle}" "${document}"
}

run_test() {
	local fail_message="${1?}"
	shift
	local -a cmd=("$@")
	"$@" >/dev/null
	local rv=$?

	((++total_test_num))

	local test_raw_name="${FUNCNAME[1]}"
	local test_name="${test_raw_name#test_}"
	test_name="${test_name//_/ }"

	if [[ $rv = 0 ]]
	then
		((++pass_test_num))
		printf '\e[32m.\e[m'
	else
		((++fail_test_num))
		failures+=("${test_name}: ${fail_message}:::${cmd[*]}")
		printf '\e[31mF\e[m'
	fi
	return $rv
}

print_summary() {
	local failure_idx=0
	echo
	echo "=== Summary ==="
	for failed_test in "${failures[@]}"
	do
		((failure_idx++))
		local test_name__fail_message="${failed_test%:::*}"
		local test_cmd="${failed_test#*:::}"
		local test_name="${test_name__fail_message%: *}"
		local fail_message="${test_name__fail_message#*: }"
		printf "\e[1mFailure #%d:\e[22m\n" "${failure_idx}"
		printf "   \e[31;1m%b\e[22m failed\e[m\n\n" "${test_name}"
		printf "   \e[34m%b\e[m\n" "${fail_message}"
		printf "   \e[mCommand: \e[31m%s\e[m\n" "${test_cmd}"
		echo
	done
	printf 'Total: %s test(s), %s passed, %s failed\n' "${total_test_num}" "${pass_test_num}" "${fail_test_num}"
}

trap print_summary EXIT

return_status() {
	! (( fail_test_num ))
}

main() {
	if [[ $# -gt 0 ]]
	then
		for test_file in "$@"
		do
			. "${test_file}"
		done
	else
		. "${default_test_file}"
	fi
	return_status
}

main "$@"
