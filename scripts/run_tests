#!/usr/bin/env bash

outdir="${outdir:-site/documents}"
default_test_file="${test_file:-${1:-spec/tests.sh}}"

declare -a failures=()
declare -a successes=()
declare total_test_num=0
declare pass_test_num=0
declare fail_test_num=0

declare DEFAULT_DOCUMENT_NAME=iso-24229.html

file_is() {
	local needle="${1}"; shift
	local document="${1}"
	[[ "$(file "${document}")" = *"${needle}"* ]]
}

test_existence_of() {
	local needle="$1"; shift
	local item_name="${1:-}"; shift
	local document="${1:-${outdir}/${DEFAULT_DOCUMENT_NAME}}"
	local not=
	if [[ "${needle}" = '!'* ]]
	then
		not=1
		needle="${needle#!}"
	fi
	run_test \
		"Expected \e[1m${document}\e[22m to ${not:+not }contain ${item_name:+${item_name} }'\e[1m${needle}\e[22m'" \
		grep ${not:+-v} "${needle}" "${document}"
}


test_file_type() {
	local document="${1}"
	local needle="${2}"
	run_test \
		"Expected file command output of \e[1m${outdir}/${document}\e[22m to contain '\e[1m${needle}\e[22m'" \
		file_is PDF "${outdir}/${document}"
}

test_existence_of_file() {
	local document="${1}"
	run_test \
		"Expected \e[1m${outdir}/\e[22m to contain file '\e[1m${document}\e[22m'" \
		test -e "${outdir}/${document}"
}

test_existence_of_auth_id() {
	test_existence_of "${1}" "authority identifier"
}

test_existence_of_auth_name() {
	test_existence_of "${1}" "authority name"
}

run_test() {
	local expectation_message="${1?}"
	shift
	local -a cmd=("$@")
	set +e
	"$@" >/dev/null
	local rv=$?
	set -e

	((++total_test_num))

	local test_raw_name="${FUNCNAME[1]}"
	local test_name="${test_raw_name#test_}"
	test_name="${test_name//_/ }"

	if [[ $rv = 0 ]]
	then
		((++pass_test_num))
		successes+=("${test_name}: ${expectation_message}:::${cmd[*]}")
		printf '\e[32m.\e[m'
	else
		((++fail_test_num))
		failures+=("${test_name}: ${expectation_message}:::${cmd[*]}")
		printf '\e[31mF\e[m'
	fi
	return $rv
}

print_summary() {
	local success_idx=0
	local failure_idx=0
	echo
	echo "=== Summary ==="
	if [[ "${#successes[@]}" -gt 0 ]]
	then
		echo
	fi

	for passed_test in "${successes[@]}"
	do
		((success_idx++)) || :
		local test_name__expectation_message="${passed_test%:::*}"
		local test_cmd="${passed_test#*:::}"
		local test_name="${test_name__expectation_message%: *}"
		local expectation_message="${test_name__expectation_message#*: }"
		printf "   \e[32;1m%b\e[22m passed\e[m\n" "${expectation_message}"
	done

	if [[ "${#failures[@]}" -gt 0 ]]
	then
		echo
	fi

	for failed_test in "${failures[@]}"
	do
		((failure_idx++))
		local test_name__expectation_message="${failed_test%:::*}"
		local test_cmd="${failed_test#*:::}"
		local test_name="${test_name__expectation_message%: *}"
		local expectation_message="${test_name__expectation_message#*: }"
		printf "\e[1mFailure #%d:\e[22m\n" "${failure_idx}"
		printf "   \e[31;1m%b\e[22m failed\e[m\n\n" "${test_name}"
		printf "   \e[34m%b\e[m\n" "${expectation_message}"
		printf "   \e[mCommand: \e[31m%s\e[m\n" "${test_cmd}"
		echo
	done
	printf 'Total: %s test(s), %s passed, %s failed\n' "${total_test_num}" "${pass_test_num}" "${fail_test_num}"
}

trap print_summary EXIT

return_status() {
	! (( fail_test_num ))
}

main() {
	if [[ $# -gt 0 ]]
	then
		for test_file in "$@"
		do
			. "${test_file}"
		done
	else
		. "${default_test_file}"
	fi
	return_status
}

main "$@"
